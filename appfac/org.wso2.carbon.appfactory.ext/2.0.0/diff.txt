Index: src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryAuthorizationManagerListener.java
===================================================================
--- src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryAuthorizationManagerListener.java	(revision 204276)
+++ src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryAuthorizationManagerListener.java	(working copy)
@@ -39,7 +39,7 @@
     @Override
     public boolean isUserAuthorized(String userName, String resourceId, String action,
                                     AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkNonModifiablePermissions(resourceId);
             Util.checkAuthorizationForUserRealm();
         }
@@ -49,7 +49,7 @@
     @Override
     public boolean isRoleAuthorized(String userName, String resourceId, String action,
                                     AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkNonModifiablePermissions(resourceId);
             Util.checkAuthorizationForUserRealm();
         }
@@ -59,7 +59,7 @@
     @Override
     public boolean authorizeUser(String userName, String resourceId, String action,
                                  AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             // avoid letting users to use deprecated methods.
             String errorMsg = "AuthorizeUser method is depreciated. Use authorizeRole method instead.";
             log.warn(errorMsg);
@@ -71,7 +71,7 @@
     @Override
     public boolean authorizeRole(String roleName, String resourceId, String action,
                                  AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkNonModifiablePermissions(resourceId);
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
@@ -82,7 +82,7 @@
     @Override
     public boolean denyUser(String userName, String resourceId, String action,
                             AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             // avoid letting users to use deprecated methods.
             String errorMsg = "denyUser method is depreciated. Use denyRole method instead.";
             log.warn(errorMsg);
@@ -94,7 +94,7 @@
     @Override
     public boolean denyRole(String roleName, String resourceId, String action,
                             AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkNonModifiablePermissions(resourceId);
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
@@ -105,7 +105,7 @@
     @Override
     public boolean clearUserAuthorization(String userName, String resourceId, String action,
                                           AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             // avoid letting users to use deprecated methods.
             String errorMsg = "clearUserAuthorization method is depreciated. Use clearRoleAuthorization method instead.";
             log.warn(errorMsg);
@@ -117,7 +117,7 @@
     @Override
     public boolean clearUserAuthorization(String userName, AuthorizationManager authorizationManager)
             throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             // avoid letting users to use deprecated methods.
             String errorMsg = "clearUserAuthorization method is depreciated. Use clearRoleAuthorization method instead.";
             log.warn(errorMsg);
@@ -129,7 +129,7 @@
     @Override
     public boolean clearRoleAuthorization(String roleName, String resourceId, String action,
                                           AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkNonModifiablePermissions(resourceId);
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
@@ -140,7 +140,7 @@
     @Override
     public boolean clearRoleActionOnAllResources(String roleName, String action,
                                                  AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
         }
@@ -150,7 +150,7 @@
     @Override
     public boolean clearRoleAuthorization(String roleName, AuthorizationManager authorizationManager)
             throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
         }
@@ -160,7 +160,7 @@
     @Override
     public boolean clearResourceAuthorizations(String resourceId, AuthorizationManager authorizationManager)
             throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkNonModifiablePermissions(resourceId);
             Util.checkAuthorizationForUserRealm();
         }
@@ -170,7 +170,7 @@
     @Override
     public boolean resetPermissionOnUpdateRole(String roleName, String newRoleName,
                                                AuthorizationManager authorizationManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName, newRoleName});
         }
Index: src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryClaimManagerListener.java
===================================================================
--- src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryClaimManagerListener.java	(revision 204276)
+++ src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryClaimManagerListener.java	(working copy)
@@ -35,7 +35,7 @@
 
     @Override
     public boolean getAttributeName(String claimURI) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAttributeName(claimURI);
@@ -43,7 +43,7 @@
 
     @Override
     public boolean getClaim(String claimURI) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getClaim(claimURI);
@@ -51,7 +51,7 @@
 
     @Override
     public boolean getClaimMapping(String claimURI) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getClaimMapping(claimURI);
@@ -59,7 +59,7 @@
 
     @Override
     public boolean getAllSupportClaimMappingsByDefault() throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAllSupportClaimMappingsByDefault();
@@ -67,7 +67,7 @@
 
     @Override
     public boolean getAllClaimMappings() throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAllClaimMappings();
@@ -75,7 +75,7 @@
 
     @Override
     public boolean getAllClaimMappings(String dialectUri) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAllClaimMappings(dialectUri);
@@ -83,7 +83,7 @@
 
     @Override
     public boolean getAllRequiredClaimMappings() throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAllRequiredClaimMappings();
@@ -91,7 +91,7 @@
 
     @Override
     public boolean getAllClaimUris() throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAllClaimUris();
@@ -99,7 +99,7 @@
 
     @Override
     public boolean addNewClaimMapping(ClaimMapping mapping) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.addNewClaimMapping(mapping);
@@ -107,7 +107,7 @@
 
     @Override
     public boolean deleteClaimMapping(ClaimMapping mapping) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.deleteClaimMapping(mapping);
@@ -115,7 +115,7 @@
 
     @Override
     public boolean updateClaimMapping(ClaimMapping mapping) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.updateClaimMapping(mapping);
@@ -123,7 +123,7 @@
 
     @Override
     public boolean getAttributeName(String domainName, String claimURI) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.getAttributeName(domainName, claimURI);
Index: src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryUserOperationEventListener.java
===================================================================
--- src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryUserOperationEventListener.java	(revision 204276)
+++ src/main/java/org/wso2/carbon/appfactory/ext/listener/AppFactoryUserOperationEventListener.java	(working copy)
@@ -42,7 +42,7 @@
     @Override
     public boolean doPreAuthenticate(String userName, Object credential, UserStoreManager userStoreManager)
             throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreAuthenticate(userName, credential, userStoreManager);
@@ -52,7 +52,7 @@
     @Override
     public boolean doPreAddUser(String userName, Object credential, String[] roleList, Map<String, String> claims,
                                 String profile, UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(roleList);
         }
@@ -64,7 +64,7 @@
     @Override
     public boolean doPreGetUserClaimValues(String userName, String[] claims, String profileName, Map<String, String> claimMap,
                                            UserStoreManager storeManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreGetUserClaimValues(userName, claims, profileName, claimMap, storeManager);
@@ -73,7 +73,7 @@
     @Override
     public boolean doPreGetUserClaimValue(String userName, String claim, String profileName,
                                           UserStoreManager storeManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreGetUserClaimValue(userName, claim, profileName, storeManager);
@@ -82,7 +82,7 @@
     @Override
     public boolean doPreUpdateRoleListOfUser(String userName, String[] deletedRoles, String[] newRoles,
                                              UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(deletedRoles);
             Util.checkNonModifiableRoles(newRoles);
@@ -93,7 +93,7 @@
     @Override
     public boolean doPreUpdateUserListOfRole(String roleName, String[] deletedUsers, String[] newUsers,
                                              UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
         }
@@ -103,7 +103,7 @@
     @Override
     public boolean doPreDeleteUserClaimValue(String userName, String claimURI, String profileName,
                                              UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreDeleteUserClaimValue(userName, claimURI, profileName, userStoreManager);
@@ -112,7 +112,7 @@
     @Override
     public boolean doPreAddRole(String roleName, String[] userList, Permission[] permissions,
                                 UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreAddRole(roleName, userList, permissions, userStoreManager);
@@ -120,7 +120,7 @@
 
     @Override
     public boolean doPreDeleteRole(String roleName, UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
         }
@@ -130,7 +130,7 @@
     @Override
     public boolean doPreUpdateRoleName(String roleName, String newRoleName, UserStoreManager userStoreManager)
             throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkNonModifiableRoles(new String[]{roleName});
         }
@@ -140,7 +140,7 @@
     @Override
     public boolean doPreUpdateCredential(String userName, Object newCredential, Object oldCredential,
                                          UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreUpdateCredential(userName, newCredential, oldCredential, userStoreManager);
@@ -149,7 +149,7 @@
     @Override
     public boolean doPreUpdateCredentialByAdmin(String userName, Object newCredential,
                                                 UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             String errorMsg = "Updating credential by Admin method is not supported for applications.";
             log.warn(errorMsg);
             throw new UserStoreException(errorMsg);
@@ -159,7 +159,7 @@
 
     @Override
     public boolean doPreDeleteUser(String userName, UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
             Util.checkUserInNonModifiableRole(userName);
         }
@@ -169,7 +169,7 @@
     @Override
     public boolean doPreSetUserClaimValue(String userName, String claimURI, String claimValue, String profileName,
                                           UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreSetUserClaimValue(userName, claimURI, claimValue, profileName, userStoreManager);
@@ -178,7 +178,7 @@
     @Override
     public boolean doPreSetUserClaimValues(String userName, Map<String, String> claims, String profileName,
                                            UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreSetUserClaimValues(userName, claims, profileName, userStoreManager);
@@ -187,7 +187,7 @@
     @Override
     public boolean doPreDeleteUserClaimValues(String userName, String[] claims, String profileName,
                                               UserStoreManager userStoreManager) throws UserStoreException {
-        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed()) {
+        if (Util.isApplicationSpecificRequest() && !Util.isUserMgtPermissionsAllowed() && Util.isCurrentTenantLoaded()) {
             Util.checkAuthorizationForUserRealm();
         }
         return super.doPreDeleteUserClaimValues(userName, claims, profileName, userStoreManager);
Index: src/main/java/org/wso2/carbon/appfactory/ext/Util.java
===================================================================
--- src/main/java/org/wso2/carbon/appfactory/ext/Util.java	(revision 204276)
+++ src/main/java/org/wso2/carbon/appfactory/ext/Util.java	(working copy)
@@ -26,15 +26,14 @@
 import org.wso2.carbon.appfactory.ext.internal.ServiceHolder;
 import org.wso2.carbon.context.CarbonContext;
 import org.wso2.carbon.context.PrivilegedCarbonContext;
+import org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;
 import org.wso2.carbon.user.api.AuthorizationManager;
 import org.wso2.carbon.user.api.UserRealm;
 import org.wso2.carbon.user.core.UserStoreException;
 import org.wso2.carbon.user.core.service.RealmService;
+import org.wso2.carbon.user.core.tenant.Tenant;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.*;
 import java.util.regex.Pattern;
 
 public class Util {
@@ -69,10 +68,32 @@
         return pattern.matcher(path).matches();
     }
 
+    public static boolean isCurrentTenantLoaded() throws UserStoreException {
+        try {
+            List<Tenant> activeTenants = TenantAxisUtils.getActiveTenants(ServiceHolder.getInstance().getConfigContextService().getServerConfigContext());
+            log.info("======Active tenant count:" + activeTenants.size());
+            boolean currentTenantLoaded = false;
+            for (Tenant tenant : activeTenants) {
+                if (CarbonContext.getThreadLocalCarbonContext().getTenantId() == tenant.getId()) {
+                    currentTenantLoaded = true;
+                    log.info("======Tenant:" + tenant.getDomain() + " is active=========");
+                    break;
+                }
+            }
+            if (!currentTenantLoaded) {
+                log.info("=========Tenant is not loaded:" + CarbonContext.getThreadLocalCarbonContext().getTenantDomain());
+            }
+            return currentTenantLoaded;
+        } catch (Exception e) {
+            throw new UserStoreException("Failed to get active list of tenants.", e);
+        }
+    }
+
     public static boolean isApplicationSpecificRequest() throws UserStoreException {
         String currentApplicationName = CarbonContext.getThreadLocalCarbonContext().getApplicationName();
-        if(log.isDebugEnabled()){
-            log.debug("Current application name in carbon context:"+currentApplicationName);
+
+        if (log.isDebugEnabled()) {
+            log.debug("Current application name in carbon context:" + currentApplicationName);
         }
         // if current application null, it is not a application specific request
         // if current application is a hidden service or a admin service, it is not a appfactory application specific request
