/*
 * Copyright 2005-2014 WSO2, Inc. (http://wso2.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.wso2.carbon.appfactory.application.mgt.type;

import org.apache.axiom.om.OMElement;
import org.apache.commons.io.FileUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.wso2.carbon.appfactory.common.AppFactoryConstants;
import org.wso2.carbon.appfactory.common.AppFactoryException;
import org.wso2.carbon.appfactory.utilities.project.ProjectUtils;
import org.wso2.carbon.appfactory.utilities.version.AppVersionStrategyExecutor;
import java.io.File;
import java.util.Map;

/**
 * Dotnet application type processor
 */
public class DotnetApplicationTypeProcessor extends AbstractApplicationTypeProcessor {
	private static final Log log = LogFactory.getLog(DotnetApplicationTypeProcessor.class);

    @Override
    public void doVersion(String applicationId, String targetVersion, String currentVersion, String workingDirectory)
            throws AppFactoryException {
        AppVersionStrategyExecutor.doVersionForGenericApplicationType(targetVersion, new File(workingDirectory));
    }

    @Override
    public void generateApplicationSkeleton(String applicationId, String workingDirectory) throws AppFactoryException {
        ProjectUtils.generateProjectArchetype(applicationId, workingDirectory,
                ProjectUtils.getArchetypeRequest(applicationId, getProperty(MAVEN_ARCHETYPE_REQUEST)));
	    //delete pom.xm generated by maven archetype
	    File pomFile = new File(workingDirectory + File.separator + AppFactoryConstants.DEFAULT_POM_FILE);
	    boolean result = FileUtils.deleteQuietly(pomFile);
	    if (!result){
		    log.warn("Error while deleting pom.xml for application id : " + applicationId);
	    }
    }

    @Override
    public OMElement configureBuildJob(OMElement jobConfigTemplate, Map<String, String> parameters, String projectType)
            throws AppFactoryException {
        if (jobConfigTemplate == null) {
            String msg =
                    "Class loader is unable to find the jenkins job configuration template for ASP.NET application types";
            log.error(msg);
            throw new AppFactoryException(msg);
        }
        jobConfigTemplate = configureRepositoryData(jobConfigTemplate, parameters);

        setValueUsingXpath(jobConfigTemplate,
                           AppFactoryConstants.PUBLISHERS_APPFACTORY_POST_BUILD_APP_ID_XPATH_SELECTOR,
                           parameters.get(AppFactoryConstants.APPLICATION_ID));

        setValueUsingXpath(jobConfigTemplate,
                           AppFactoryConstants.PUBLISHERS_APPFACTORY_POST_BUILD_APP_VERSION_XPATH_SELECTOR,
                           parameters.get(AppFactoryConstants.APPLICATION_VERSION));

        setValueUsingXpath(jobConfigTemplate,
                           AppFactoryConstants.PUBLISHERS_APPFACTORY_POST_BUILD_USERNAME_XPATH_SELECTOR,
                           parameters.get(AppFactoryConstants.APPLICATION_USER));

        return jobConfigTemplate;

    }
}
