Index: src/main/java/org/wso2/carbon/appfactory/core/cache/JDBCResourceCacheManager.java
===================================================================
--- src/main/java/org/wso2/carbon/appfactory/core/cache/JDBCResourceCacheManager.java	(revision 209944)
+++ src/main/java/org/wso2/carbon/appfactory/core/cache/JDBCResourceCacheManager.java	(working copy)
@@ -21,9 +21,7 @@
 import org.wso2.carbon.appfactory.core.dto.Resource;
 
 import javax.cache.Cache;
-import javax.cache.CacheManager;
 import javax.cache.Caching;
-import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -31,102 +29,95 @@
  */
 public class JDBCResourceCacheManager {
 
-    public static final String AF_RESOURCE_CACHE_MANAGER = "af.resource.cache.manager";
-    public static final String AF_RESOURCE_CACHE = "af.resource.cache";
-    public static final String AF_RESOURCE_NAME_CACHE = "af.resource.name.cache";
-    public static final String KEY_SEPARATOR = "_";
+    private static final String AF_RESOURCE_CACHE_MANAGER = "af.resource.cache.manager";
+    private static final String AF_RESOURCE_CACHE = "af.resource.cache";
 
-    private static CacheManager getCacheManager() {
-        return Caching.getCacheManager(AF_RESOURCE_CACHE_MANAGER);
-    }
+    private JDBCResourceCacheManager() {
 
-    /**
-     * The cache that holds resource names
-     *
-     * @param resourceType resource type
-     * @param environment  environment
-     * @return cache
-     */
-    public static Cache<String, Boolean> getResourceNameCache(String resourceType,
-                                                              String environment) {
-        return getCacheManager().getCache(
-            AF_RESOURCE_NAME_CACHE + resourceType + KEY_SEPARATOR + environment);
     }
 
     /**
-     * The cache that holds resources
+     * Add resource to resource cache
      *
-     * @param resourceType resource type
-     * @param environment  environment
-     * @return cache
+     * @param applicationId id of the application, which contain the resources
+     * @param resourceType  resource type of the resources i.e: data source, database, etc
+     * @param environment   the environment of the resources
+     * @param resources     the resources, need to be added to the cache
+     * @return resource cache key
      */
-    public static Cache<String, Resource> getResourceCache(String resourceType,
-                                                           String environment) {
-        return getCacheManager().getCache(
-            AF_RESOURCE_CACHE + KEY_SEPARATOR + resourceType + KEY_SEPARATOR + environment);
+    public static String addResourcesToCache(String applicationId,
+                                      String resourceType, String environment,
+                                      List<Resource> resources) {
+        String cacheKey = constructCacheKey(applicationId, environment, resourceType);
+        Cache<String, List<Resource>> cache = Caching.getCacheManager(AF_RESOURCE_CACHE_MANAGER).getCache(
+                AF_RESOURCE_CACHE);
+        cache.put(cacheKey, resources);
+        return cacheKey;
     }
 
     /**
-     * Construct the resource name cache key
+     * Get all the resource of a specific resource type from the cache
      *
-     * @param tenantId      tenant id
-     * @param applicationId application id
-     * @param resourceName  resource name
-     * @param resourceType  resource type
-     * @param environment   environment
-     * @return key
+     * @param appId  id of application, which contain the resources
+     * @param environment environment of the resources
+     * @param resourceType type of the resource i.e: data source, database, etc
+     * @return list of resources retrieved from cache
      */
-    public static String constructCacheKey(int tenantId, String applicationId, String resourceName,
-                                           String resourceType, String environment) {
-        return tenantId + KEY_SEPARATOR + applicationId + KEY_SEPARATOR + resourceName +
-               KEY_SEPARATOR + resourceType + KEY_SEPARATOR + environment;
+    public static List<Resource> getResourcesFromCache(String appId, String environment, String resourceType) {
+        String cacheKey = constructCacheKey(appId, environment, resourceType);
+        Cache<String, List<Resource>> cache = Caching.getCacheManager(AF_RESOURCE_CACHE_MANAGER).getCache(
+                AF_RESOURCE_CACHE);
+        List<Resource> resources = cache.get(cacheKey);
+        return resources;
     }
 
     /**
-     * Add resource to resource cache
+     * This method check whether a resource is available in cache
      *
-     * @param tenantId      tenant id
-     * @param applicationId application id
-     * @param resourceType  resource type
-     * @param environment   environment
-     * @param resource      resource
-     * @return resource cache key
+     * @param appId id of application, which contain the resources
+     * @param environment the environment of the resources
+     * @param resourceType type of the resource i.e: data source, database, etc.
+     * @param resourceName name of the resource, which need to be checked
+     * @return boolean value, which state whether the resource is exists in the cache or not
      */
-    public static String addToResourceCache(int tenantId, String applicationId, String resourceName,
-                                            String resourceType, String environment,
-                                            Resource resource) {
-        String cacheKey =
-            constructCacheKey(tenantId, applicationId, resourceName, resourceType, environment);
-        Cache<String, Resource> cache = getResourceCache(resourceType, environment);
-        cache.put(cacheKey, resource);
-        return cacheKey;
+    public static boolean isResourceExist(String appId, String environment, String resourceType, String resourceName) {
+        String cacheKey = constructCacheKey(appId, environment, resourceType);
+        Cache<String, List<Resource>> cache = Caching.getCacheManager(AF_RESOURCE_CACHE_MANAGER).getCache(
+                AF_RESOURCE_CACHE);
+        List<Resource> resources = cache.get(cacheKey);
+        if (resources != null) {
+            for (Resource resource : resources) {
+                if (resource.getName().equalsIgnoreCase(resourceName)) {
+                    return true;
+                }
+            }
+        }
+        return false;
     }
 
     /**
-     * Get resource from resource cache
+     * Clear both resource and resource name cache
      *
-     * @param resourceType resource type
-     * @param environment  environment
-     * @return List of Resource
+     * @param appId  id of application, which contain the resources
+     * @param environment environment of the resources
+     * @param resourceType type of the resource i.e: data source, database, etc
      */
-    public static List<Resource> getFromResourceCache(String resourceType, String environment) {
-        List<Resource> resources = new ArrayList<Resource>(0);
-        Cache<String, Resource> resourceCache = getResourceCache(resourceType, environment);
-        for (Cache.Entry<String, Resource> entry : resourceCache) {
-            resources.add(entry.getValue());
-        }
-        return resources;
+    public static void clearCache(String appId, String environment, String resourceType) {
+        String cacheKey = constructCacheKey(appId, environment, resourceType);
+        Caching.getCacheManager(AF_RESOURCE_CACHE_MANAGER).getCache(AF_RESOURCE_CACHE).remove(cacheKey);
     }
 
     /**
-     * Clear both resource and resource name cache
+     * This method create the cache key for a specified resource type
      *
-     * @param resourceType resource type
-     * @param environment  environment
+     * @param applicationId id of the application, which contain the resources
+     * @param environment   the environment of the resources
+     * @param resourceType  type of the resource i.e: data source, database, etc
+     * @return the constructed key string
      */
-    public static void clearCache(String resourceType, String environment) {
-        getResourceCache(resourceType, environment).removeAll();
-        getResourceNameCache(resourceType, environment).removeAll();
+    public static String constructCacheKey(String applicationId, String environment, String resourceType) {
+        final String KEY_SEPARATOR = "_";
+        return applicationId + KEY_SEPARATOR + environment + KEY_SEPARATOR + resourceType;
     }
 
 }
Index: src/main/java/org/wso2/carbon/appfactory/core/dao/JDBCResourceDAO.java
===================================================================
--- src/main/java/org/wso2/carbon/appfactory/core/dao/JDBCResourceDAO.java	(revision 209944)
+++ src/main/java/org/wso2/carbon/appfactory/core/dao/JDBCResourceDAO.java	(working copy)
@@ -26,11 +26,11 @@
 import org.wso2.carbon.appfactory.core.util.AppFactoryDBUtil;
 import org.wso2.carbon.context.CarbonContext;
 
-import javax.cache.Cache;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -81,28 +81,28 @@
             if (affectedRow > 0) {
                 databaseConnection.commit();
                 // clear the cache
-                JDBCResourceCacheManager.clearCache(resourceType, environment);
+                JDBCResourceCacheManager.clearCache(applicationKey, environment, resourceType);
                 if (log.isDebugEnabled()) {
                     log.debug("Cache cleared");
                 }
                 return true;
             }
 
-            handleException("Error while adding resource " + resourceName + " of type " +
-                            resourceType + " of application " + applicationKey);
         } catch (SQLException e) {
             try {
                 if (databaseConnection != null) {
                     databaseConnection.rollback();
                 }
             } catch (SQLException e1) {
-                handleException(
-                    "Error while rolling back add resource " + resourceName + " of type " +
-                    resourceType + " of application " + applicationKey, e1
-                );
+                String msg = "Error while rolling back add resource " + resourceName + " of type " + resourceType +
+                             " of application " + applicationKey;
+                log.error(msg, e1);
             }
-            handleException("Error while adding resource " + resourceName + " of type " +
-                            resourceType + " of application " + applicationKey, e);
+            String msg =
+                    "Error while adding resource " + resourceName + " of type " + resourceType + " of application " +
+                    applicationKey;
+            log.error(msg, e);
+            throw new AppFactoryException(msg, e);
         } finally {
             AppFactoryDBUtil.closePreparedStatement(preparedStatement);
             AppFactoryDBUtil.closeConnection(databaseConnection);
@@ -124,18 +124,10 @@
     public boolean isResourceExists(String applicationKey, String resourceName, String resourceType,
                                     String environment) throws AppFactoryException {
         int tenantId = CarbonContext.getThreadLocalCarbonContext().getTenantId();
-        String resourceNameCacheKey = JDBCResourceCacheManager.constructCacheKey(
-            tenantId, applicationKey, resourceName, resourceType, environment);
-        // Do the cache check
-        Cache<String, Boolean> resourceNameCache =
-            JDBCResourceCacheManager.getResourceNameCache(resourceType, environment);
-        if (resourceNameCache.containsKey(resourceNameCacheKey)) {
-            if (log.isDebugEnabled()) {
-                log.debug("Retrieving data from the resource name cache : " + resourceNameCacheKey);
-            }
+
+        if (JDBCResourceCacheManager.isResourceExist(applicationKey, environment, resourceType, resourceName)) {
             return true;
         }
-        // No cache hit
 
         Connection databaseConnection = null;
         PreparedStatement preparedStatement = null;
@@ -151,17 +143,14 @@
             preparedStatement.setString(5, resourceName);
             resourcesRS = preparedStatement.executeQuery();
             if (resourcesRS.next()) {
-                // Update the cache
-                resourceNameCache.put(resourceNameCacheKey, Boolean.TRUE);
-                if (log.isDebugEnabled()) {
-                    log.debug("Added resource name to the cache : " + resourceNameCacheKey);
-                }
                 return true;
             }
         } catch (SQLException e) {
-            handleException("Error while checking resource " + resourceName + " of application " +
-                            applicationKey + " type " + resourceType + " environment " +
-                            environment, e);
+            String msg =
+                    "Error while checking resource " + resourceName + " of application " + applicationKey + " type " +
+                    resourceType + " environment " + environment;
+            log.error(msg, e);
+            throw new AppFactoryException(msg, e);
         } finally {
             AppFactoryDBUtil.closeResultSet(resourcesRS);
             AppFactoryDBUtil.closePreparedStatement(preparedStatement);
@@ -169,7 +158,6 @@
         }
 
         return false;
-
     }
 
     /**
@@ -201,28 +189,29 @@
             if (affectedRow > 0) {
                 databaseConnection.commit();
 
-                JDBCResourceCacheManager.clearCache(resourceType, environment);
+                JDBCResourceCacheManager.clearCache(applicationKey, environment, resourceType);
                 if (log.isDebugEnabled()) {
                     log.debug("Cache cleared");
                 }
 
                 return true;
             }
-            handleException("Error while deleting resource " + resourceName + " of type "
-                            + resourceType + " of application " + applicationKey);
+
         } catch (SQLException e) {
             try {
                 if (databaseConnection != null) {
                     databaseConnection.rollback();
                 }
             } catch (SQLException e1) {
-                handleException(
-                    "Error while rolling back delete resource " + resourceName + " of type " +
-                    resourceType + " of application " + applicationKey, e1
-                );
+                String msg = "Error while rolling back delete resource " + resourceName + " of type " + resourceType +
+                             " of application " + applicationKey;
+                log.error(msg, e1);
             }
-            handleException("Error while deleting resource " + resourceName + " of type " +
-                            resourceType + " of application " + applicationKey, e);
+            String msg =
+                    "Error while deleting resource " + resourceName + " of type " + resourceType + " of application " +
+                    applicationKey;
+            log.error(msg, e);
+            throw new AppFactoryException(msg, e);
         } finally {
             AppFactoryDBUtil.closePreparedStatement(preparedStatement);
             AppFactoryDBUtil.closeConnection(databaseConnection);
@@ -246,15 +235,16 @@
         int tenantId = CarbonContext.getThreadLocalCarbonContext().getTenantId();
 
         // Get resources from cache
-        List<Resource> resources = JDBCResourceCacheManager.getFromResourceCache(
-            resourceType, environment);
+        List<Resource> resources = JDBCResourceCacheManager.getResourcesFromCache(
+                applicationKey, environment, resourceType);
         if (log.isDebugEnabled()) {
-            log.debug("Retrieved resources from resource cache");
+            log.debug("Retrieved resources from resource cache for the resource type " + resourceType);
         }
 
         // If no resources from cache
-        if (resources.isEmpty()) {
+        if (resources == null) {
 
+            resources = new ArrayList<Resource>();
             Connection databaseConnection = null;
             PreparedStatement preparedStatement = null;
             ResultSet resourcesRS = null;
@@ -274,18 +264,21 @@
                     resource.setName(resourcesRS.getString(RESOURCE_NAME));
                     resource.setDescription(resourcesRS.getString(DESCRIPTION));
                     resources.add(resource);
-                    // add to resource cache
-                    String cacheKey = JDBCResourceCacheManager
-                        .addToResourceCache(tenantId, applicationKey, resource.getName(),
-                                            resourceType, environment, resource);
-                    if (log.isDebugEnabled()) {
-                        log.debug("Added to the resource cache: " + cacheKey);
-                    }
                 }
 
+                String cacheKey = JDBCResourceCacheManager.addResourcesToCache(
+                        applicationKey, resourceType, environment, resources);
+                if (log.isDebugEnabled()) {
+                    log.debug("Resources of resource type " + resourceType + " added to the cache with cache key " +
+                              cacheKey);
+                }
+
             } catch (SQLException e) {
-                handleException("Error while getting resources of application " + applicationKey +
-                                " type " + resourceType + " environment " + environment, e);
+                String msg =
+                        "Error while getting resources of application " + applicationKey + " type " + resourceType +
+                        " environment " + environment;
+                log.error(msg, e);
+                throw new AppFactoryException(msg, e);
             } finally {
                 AppFactoryDBUtil.closeResultSet(resourcesRS);
                 AppFactoryDBUtil.closePreparedStatement(preparedStatement);
@@ -295,14 +288,4 @@
 
         return resources.toArray(new Resource[resources.size()]);
     }
-
-    private static void handleException(String msg, Throwable t) throws AppFactoryException {
-        log.error(msg, t);
-        throw new AppFactoryException(msg, t);
-    }
-
-    private static void handleException(String msg) throws AppFactoryException {
-        log.error(msg);
-        throw new AppFactoryException(msg);
-    }
 }
