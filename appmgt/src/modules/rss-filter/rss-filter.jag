<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

// used for logging
var log = new Log("modules/rss-filter.jag");
var modManager = jagg.module("manager");
var rssAdapter = Packages.org.wso2.carbon.appfactory.core.dao.ResourceManager;
var carbon = require('carbon');
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;

var addDatabase = function (databaseName, application, environment, databaseDescription) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database info to RXT " + databaseName);
    }
    var tenantDomain = modManager.getTenantDomain() ;
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
    	context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain), true);
        context.getThreadLocalCarbonContext().setUsername(jagg.getUser().split("@")[0]);
        rssAdapter.addDatabase(databaseName, application, environment, databaseDescription);
	} catch(e) {
        var msg = "Error while adding database : " + databaseName + " for tenant: " + tenantDomain +
            " , applcation Id: " + application + " and stage: " + environment;
        log.error(msg + " : " + e.message);
        throw e;
	} finally {
		context.endTenantFlow();
	}
};
var addDatabaseUser = function (databaseUserName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database user info to RXT " + databaseUserName);
    }
   var tenantDomain=modManager.getTenantDomain() ;
   var context=multitenancy.getPrivilegedCarbonContext();
   var tenantManager= multitenancy.getTenantManager();
	try{
   	 context.startTenantFlow();
    	 context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    	 context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
         rssAdapter.addDatabaseUser(databaseUserName, application, environment);
	}catch(e){
       		log.error(e);
       		throw e; 
	}finally {
    		context.endTenantFlow();
	}
    
};
var addDatabaseTemplate = function (databaseTemplateName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Adding database template info to RXT " + databaseTemplateName);
    }
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try{
    	context.startTenantFlow();
    	context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    	context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        rssAdapter.addDatabaseUserPermissionTemplate(databaseTemplateName, application, environment); 
    }catch(e){
       log.error(e);
       throw e; 
   }finally {

    context.endTenantFlow();
  }

 
};
var getAllDatabases = function (application, environment, allDatabases) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all database info of " + application + " in " + environment);
    }
    var filteredDBs = [];
    //ToDo: What is the reason for this filtering???
    //Storage server returns all the databases belongs to the tenant.
    //We need to filter this list and get db created for this application only.
    //Once we have role based filtering in SS we do not need to do this.
     
    var names;
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try{
    	context.startTenantFlow();
    	context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    	context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        names = rssAdapter.getAllDatabases(application, environment);
    }catch(e){
       log.error(e);
       throw e; 
    }finally {
      context.endTenantFlow();
   }
    if (log.isDebugEnabled()) {
        log.debug("Received database info from  RXT " + names);
    }
    for (var name in names) {

        for (var db in allDatabases) {

            if (names[name] == getTenantAwareDBName(allDatabases[db].dbName)) {
                filteredDBs.push(allDatabases[db]);
                if (log.isDebugEnabled()) {
                    log.debug("Filtered database " + names[name]);
                }

            }
        }
    }
    return filteredDBs;

};
var getAllDatabaseUsers = function (application, environment, allUsers) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all users of " + application + " in " + environment);
    }
    var userNames;
     var tenantDomain=modManager.getTenantDomain() ;
     var context=multitenancy.getPrivilegedCarbonContext();
     var tenantManager= multitenancy.getTenantManager();
     try{
     	context.startTenantFlow();
    	context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    	context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        userNames = rssAdapter.getAllDatabaseUsers(application, environment);
     }catch(e){
       log.error(e);
       throw e; 
    }finally {
    context.endTenantFlow();
    }

    var filteredUsers = [];
    for (var userName in userNames) {
       for(var user in allUsers){
        if (userNames[userName] == allUsers[user].name) {
            filteredUsers.push(allUsers[user]);
            if (log.isDebugEnabled()) {
                log.debug("Filtering user " + userNames[userName]);
            }
        }
      }
    }

return filteredUsers;
};

var isDatabaseUserExists = function (application, environment, user) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all users of " + application + " in " + environment);
    }
   var tenantDomain=modManager.getTenantDomain() ;
   var context=multitenancy.getPrivilegedCarbonContext();
   var tenantManager= multitenancy.getTenantManager();
   try{
   	 context.startTenantFlow();
    	 context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    	 context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
         return rssAdapter.isDatabaseUserExist(application,user,environment);
    }catch(e){
       	 log.error(e);
    }finally {
    context.endTenantFlow();
    }
    return false;
};
var getAllDatabaseTemplates = function (application, environment, allTemplates) {
    if (log.isDebugEnabled()) {
        log.debug("Getting all template of " + application + " in " + environment);
    }
    var templateNames;
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
	try{
    		context.startTenantFlow();
    		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
                templateNames = rssAdapter.getAllDatabasePrivilegeTemplates(application, environment);
	}catch(e){
       		log.error(e);
       		throw e; 
	}finally {
    		context.endTenantFlow();
	}

    var filteredTemplates = [];
    for (var templateName in templateNames) {

        for (var template in allTemplates) {
            if (templateNames[templateName] == getEnvironmentAwareTemplateName(allTemplates[template].name)) {

                filteredTemplates.push(allTemplates[template]);
                if (log.isDebugEnabled()) {
                    log.debug("Filtering template " + templateNames[templateName]);
                }
            }
        }
    }
    return filteredTemplates;
};
var deleteDatabase = function (databaseName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting db " + databaseName);
    }
 
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
	try{
    		context.startTenantFlow();
    		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
                rssAdapter.deleteDatabase(databaseName, application, environment);  
	}catch(e){
       		log.error(e);
       		throw e; 
	}finally {
    		context.endTenantFlow();
	}
};
var deleteDatabaseUser = function (databaseUserName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting user " + databaseUserName);
    }
  
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try{
    	context.startTenantFlow();
    	context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    	context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        rssAdapter.deleteDatabaseUser(databaseUserName, application, environment);
    }catch(e){
       log.error(e);
       throw e; 
   }finally {
       context.endTenantFlow();
   } 
};
var deleteDatabaseTemplate = function (databaseTemplateName, application, environment) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting template " + databaseTemplateName);
    }
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try{
    		context.startTenantFlow();
    		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
    		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
                rssAdapter.deleteDatabaseUserPermissionTemplate(databaseTemplateName, application, environment);
    }catch(e){
       		log.error(e);
       		throw e; 
    }finally {
    context.endTenantFlow();
   }
};

var getTenantAwareDBName = function (fullName) {
    return fullName;
};
var getEnvironmentAwareTemplateName = function (fullName) {
    return fullName.substr(0, fullName.lastIndexOf('@')).replace('@','..');
};

// Get all database info from app factory db
var getAllDatabasesInfo = function (application, environment) {

    if (log.isDebugEnabled()) {
        log.debug("Getting all database info of " + application + " in " + environment);
    }

    var resultInfo = [];
    var resources = [];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain), true);
        context.getThreadLocalCarbonContext().setUsername(jagg.getUser().split("@")[0]);
        resources = rssAdapter.getAllDatabasesInfo(application, environment);
    } catch (e) {
        var msg = "Error while getting all database info for tenant: " + tenantDomain +
            ", applicationId: " + application + " and environment: " + environment;
        log.error(msg + " : " + e.message);
        throw e;
    } finally {
        context.endTenantFlow();
    }

    for (var resource in resources) {
        var resourceInfo = {};
        resourceInfo.stage = environment
        resourceInfo.name = resources[resource].name;
        resourceInfo.description = resources[resource].description;
        resultInfo.push(resourceInfo);
    }

    return resultInfo;
};

// Get all datasource info from app factory db
var getAllDatasourceInfo = function (application, environment) {

    if (log.isDebugEnabled()) {
        log.debug("Getting all datasource info of " + application + " in " + environment);
    }

    var resultInfo = [];
    var resources = [];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain), true);
        context.getThreadLocalCarbonContext().setUsername(jagg.getUser().split("@")[0]);
        resources = rssAdapter.getAllDatasourceInfo(application, environment);
    } catch (e) {
        var msg = "Error while getting all datasource info for tenant: " + tenantDomain +
                ", applicationId: " + application + " and environment:" + environment;
        log.error(msg + " : " + e.message);
        throw e;
    } finally {
        context.endTenantFlow();
    }

    for (var resource in resources) {
        var resourceInfo = {};
        resourceInfo.stage = environment
        resourceInfo.name = resources[resource].name;
        resourceInfo.description = resources[resource].description;
        resultInfo.push(resourceInfo);
    }

    return resultInfo;
};

// Add datasource info to the app factory db
var addDatasource = function (name, applicationId, stage, description) {

    if (log.isDebugEnabled()) {
        log.debug("Add datasource: " + name + " for " + applicationId + " in " + stage);
    }

    var resultInfo = [];
    var resources = [];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain), true);
        context.getThreadLocalCarbonContext().setUsername(jagg.getUser().split("@")[0]);
        resources = rssAdapter.addDatasource(name, applicationId, stage, description);
    } catch (e) {
        var msg = "Error while adding datasource info : tenant: " + tenantDomain +
                ", application: " + applicationId + " and environment:" + stage;
        log.error(msg + " : " + e.message);
        throw e;
    } finally {
        context.endTenantFlow();
    }

    for (var resource in resources) {
        var resourceInfo = {};
        resourceInfo.stage = environment
        resourceInfo.name = resources[resource].name;
        resourceInfo.description = resources[resource].description;
        resultInfo.push(resourceInfo);
    }

    return resultInfo;
};

// Delete datasource from app factory database
var deleteDatasource = function (datasourceName, applicationId, stage) {
    if (log.isDebugEnabled()) {
        log.debug("Deleting datasource: " + datasourceName + " for " + applicationId + " in " +
            stage);
    }

    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain), true);
        context.getThreadLocalCarbonContext().setUsername(jagg.getUser().split("@")[0]);
        rssAdapter.deleteDatasource(databaseName, applicationId, stage);
    } catch (e) {
        var msg = "Error while deleting datasource from app factory db : tenant: " + tenantDomain +
                ", application: " + applicationId + " and environment:" + stage;
        log.error(msg + " : " + e.message);
        throw e;
    } finally {
        context.endTenantFlow();
    }
};
%>
