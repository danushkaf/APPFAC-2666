<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");
var log = new Log("modules/events/subscribe/subscribe.jag");
var modManager = jagg.module("manager");
var applicationModule = jagg.module("application");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var SubscriptionManager = Packages.org.wso2.carbon.appfactory.eventing.jms.SubscriptionManager;
var MessageStore = Packages.org.wso2.carbon.appfactory.eventing.jms.MessageStore;
var result = {};


var subscribe = function (topic, subscriberId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        context.getThreadLocalCarbonContext().setUsername(user);
        var subscriptionManager = SubscriptionManager.getInstance();
        subscriptionManager.startSubscription(topic, subscriberId);
    } finally {
        context.endTenantFlow();
    }

};
var pollMessages = function (topic, subscriberId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    var result = [];
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        context.getThreadLocalCarbonContext().setUsername(user);
        var messageStore = MessageStore.getInstance();
        var messages = messageStore.getMessages(topic, subscriberId);
        for (var i = 0; i < messages.length; i++) {
            var message = {};
	    message.topic = topic;
            message.id = messages[i].getJMSMessageID();
            message.messageBody = messages[i].getString('messageBody');
            message.messageTitle = messages[i].getString('messageTitle');
            result.push(message);
        }
    } finally {
        context.endTenantFlow();
    }
    return result;
};
var acknowledgeMessage = function (topic, subscriberId, messageId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        context.getThreadLocalCarbonContext().setUsername(user);
        var messageStore = MessageStore.getInstance();
        messageStore.acknowledgeMessage(topic, subscriberId, messageId);
    } finally {
        context.endTenantFlow();
    }

};
var stopSubscription = function (topic, subscriberId) {
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        context.getThreadLocalCarbonContext().setUsername(user);
        var subscriptionManager = SubscriptionManager.getInstance();
        subscriptionManager.stopSubscription(topic, subscriberId);
    } finally {
        context.endTenantFlow();
    }
};


var stopAllSubscriptions = function (uid) {
    if(jagg.getUser() == null){
        return;
    }
    var user = jagg.getUser().split("@")[0];
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        context.getThreadLocalCarbonContext().setUsername(user);
        var subscriptionManager = SubscriptionManager.getInstance();
        subscriptionManager.stopAllSubscriptions(uid);
    } finally {
        context.endTenantFlow();
    }
};


var restartSubscription = function (subscriber) {
    subscriber.restart();
};
var getUserTopics = function(){
       var topics = [];
       var userApps = session.get("application_list");
       if(userApps == null) {
          userApps = mod.getAllAppsOfUser(jagg.getUser());
          session.put('application_list', userApps);
       }

       var parsedArray = parse(userApps);
        for (var i = 0; i < parsedArray.length; i++) {
            var application = parsedArray[i];
		topics[i]=application.key;
	}
	topics[parsedArray.length] = 'APPLICATION_CREATION';
	return topics;	
}
%>

