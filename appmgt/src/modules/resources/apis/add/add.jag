<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/resources/apis/add/add.jag');

var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var modManager = jagg.module("manager");
var permissionModule = jagg.module("permission");

var createApplication = function (applicationKey){
	var mod = jagg.module("application");
	var application =  mod.getAppInfo(applicationKey);
	if(jagg.getUser() != application.owner){
		log.error("Unauthorized!!! User does not have permission to complete action");
		return;
	}
	//    jagg.module("permission").checkUserActionPermissionforApp(applicationKey,PERMISSION.CONFIGURATION.API.MANAGER);
	var result;
	var tenantDomain=modManager.getTenantDomain() ;
	var context=multitenancy.getPrivilegedCarbonContext();
	var tenantManager= multitenancy.getTenantManager();
	try{
		context.startTenantFlow();
		context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
		context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
		var service = server.osgiService('org.wso2.carbon.appfactory.apiManager.integration.APIManagerIntegrationService') ;
		result = service.createApplication(applicationKey, session.get("SAML_TOKEN"));

		if(log.isDebugEnabled()){
			log.debug("Invoking service "+service+" returned result:"+result);
		}
				
		return result;
	}catch(e){
		log.error("Error while retrieving saved keys for " + applicationKey + "\n" + e.message);
		throw "Error while retrieving saved keys for " + applicationKey;
	}finally {
		context.endTenantFlow();
	}
};

%>
