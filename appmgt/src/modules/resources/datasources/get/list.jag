<%
include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/resources/datasources/get/list.jag');

var modManager = jagg.module("manager");
var permissionModule = jagg.module("permission");

var reloadAllDataSources = function reloadAllDataSources(applicationKey, epr){
    var ws = require('ws');
    var reloadAllDS = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.2;
    options.action = "urn:reloadAllDataSources";
    var payload = '<ns:reloadAllDataSources xmlns:ns="http://datasource.ext.appfactory.carbon.wso2.org"/>';
    var result;
    modManager.setAuthHeaders(options);

    try {
		reloadAllDS.open(options, epr + "AppFactoryNDataSourceAdmin", false);
		reloadAllDS.send(payload);
	   	result = reloadAllDS.responseE4X;
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
        }
        
 		return parseResponse(result);
    } catch (e) {
        log.error("Error while reloading datasources " + "\n"+e.message);
        throw "Error while relading datasources " + "\n"+e.message;
    }
};

var getDatasources=function (applicationKey, stage){
	var ws = require('ws');
	var ds = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.action = "urn:getAllDataSources";
	var payload ='<p:getAllDataSources xmlns:p="http://datasource.ext.appfactory.carbon.wso2.org">'+
                     '<xs:applicationID xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+applicationKey+'</xs:applicationID>'+
                    '</p:getAllDataSources>';
	var result;
	var endpoint = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.DeploymentServerURL');
	modManager.setAuthHeaders(options);
	try {
		reloadAllDataSources(applicationKey, endpoint);
		ds.open(options, endpoint + "AppFactoryNDataSourceAdmin", false);
		ds.send(payload);
	   	result = ds.responseE4X;
	   	return parseResponse(result);
    } catch (e) {
    	log.error(e.toString());
        throw e;
    }
};

var datasourceCount = function (applicationKey, stage){
	var ws = require('ws');
	var ds = new ws.WSRequest();
	var options = new Array();
	options.useSOAP = 1.2;
	options.useWSA = 1.0;
	options.action = "urn:getAllDataSources";
	var endpoint = getProperty(DEPLOYMENT_STAGES+'.'+stage+'.DeploymentServerURL');
	modManager.setAuthHeaders(options);
	var payload = '<xsd:getAllDataSources xmlns:xsd="http://datasource.ext.appfactory.carbon.wso2.org"/>';
	var result;
	
	try {	
		ds.open(options, endpoint + "AppFactoryNDataSourceAdmin", false);
		ds.send(payload);
	   	result = ds.responseE4X;
		var dataSources = result.*::["return"].*::dsMetaInfo;
		
	   	return dataSources.length();
    } catch (e) {
    	return 0;
    }
};


var parseResponse=function (response){
	var dataSources=response.*::["return"].*::dsMetaInfo;
	var dataSourcesObject=[];
	
	for(var i=0; i<dataSources.length(); i++){
		var task={};
		var entry=dataSources[i];
		var configToXml = new XML(entry.*::definition.*::dsXMLConfiguration.toString());
		
		var name = entry.*::name.text();
		var description=entry.*::description.text();
		var dataSourceType=entry.*::definition.*::type.text(); 
		var driverClassName=configToXml.*::driverClassName.text();
		var url=configToXml.*::url.text();
		var username=configToXml.*::username.text();
		var password=configToXml.*::password.text();
		
		task.name=name;
		task.description=description;
		task.type=dataSourceType;
		task.driverClassName=driverClassName;
		task.url=url;
		task.username=username;
		task.password=password;
		
		dataSourcesObject.push(task);
	}

	return dataSourcesObject;
};

var getDataSource = function (applicationId, stageName, dbname) {
    var ws = require('ws');
    var getDataSourceService = new ws.WSRequest();
    var options = [];
    options.useSOAP = 1.1;
    options.action = "urn:getDataSource";

    var payload =    '<p:getDataSource xmlns:p="http://datasource.ext.appfactory.carbon.wso2.org">'+
      '<xs:dsName xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+dbname+'</xs:dsName>'+
      '<xs:applicationID xmlns:xs="http://datasource.ext.appfactory.carbon.wso2.org">'+applicationId+'</xs:applicationID>'+
   '</p:getDataSource>';

    var result;
    try {
        var endPoint = getProperty('ApplicationDeployment.DeploymentStage.' + stageName + '.DeploymentServerURL') + 'AppFactoryNDataSourceAdmin';
        modManager.setAuthHeaders(options);
        getDataSourceService.open(options, endPoint, false);
        getDataSourceService.send(payload);

       var result = getDataSourceService.responseE4X;
       var ns = new Namespace("http://org.apache.axis2/xsd");
       var ax2223 = new Namespace("http://services.core.ndatasource.carbon.wso2.org/xsd");

       var response = result.*::["return"];
       var responseDS = response[0];
       var dataSources = responseDS.*::dsMetaInfo;
        if (dataSources.length() > 0) {
            var configuration = responseDS.*::["dsMetaInfo"][0].*::["definition"][0].*::["dsXMLConfiguration"];
            var definition = responseDS.*::["dsMetaInfo"][0].*::["definition"][0];
            var type = definition.*::["type"][0].text();
            var desc = responseDS.*::["dsMetaInfo"][0].*::["description"][0].text();
            var name = responseDS.*::["dsMetaInfo"][0].*::["name"][0].text();
            var configToXml = new XML(configuration.toString());
            var driverClassName = configToXml.*::driverClassName.text();
            var url = configToXml.*::url.text();
            var username = configToXml.*::username.text();
            var password = configToXml.*::password.text();

            var dataSource = {};
            dataSource.applicationKey = applicationId;
            dataSource.name = name;
            dataSource.type = type;
            dataSource.desc = desc;
            dataSource.driver = driverClassName;
            dataSource.url = url;
            dataSource.username = username;
            dataSource.password = password;
        }
       return dataSource;

    } catch (e) {
        log.error("Error while getting datasource " + stageName + "\n" + e.message);
        throw "Error while deleting datasource  " + stageName;
    }
};

var getDataSourceInfoUrl=function (stage){
       var configEntry='ApplicationDeployment.DeploymentStage.' + stage + '.DeploymentServerURL';
        
	   var endPoint = getProperty('ApplicationDeployment.DeploymentStage.' + stage + '.DeploymentServerURL');
	   return endPoint;
};

// Get datasource info : name, desription and stage
var getDatasourceInfo = function (applicationKey, stage) {
    var rssFilter = jagg.module("rss-filter");
    return rssFilter.getAllDatasourceInfo(applicationKey, stage);
}

%>
